---
- name: Install Oh My Zsh
  shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || true
  args:
    creates: "{{ user_home }}/.oh-my-zsh"

- name: Install Powerlevel10k theme
  git:
    repo: https://github.com/romkatv/powerlevel10k.git
    dest: "{{ user_home }}/.oh-my-zsh/custom/themes/powerlevel10k"
    depth: 1

- name: Configure zsh with custom settings
  blockinfile:
    path: "{{ user_home }}/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
      # Initialization code that may require console input (password prompts, [y/n]
      # confirmations, etc.) must go above this block; everything else may go below.
      if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
        source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
      fi

      # Oh My Zsh configuration
      export ZSH="$HOME/.oh-my-zsh"
      ZSH_THEME="powerlevel10k/powerlevel10k"
      plugins=(git)
      
      # Disable Oh My Zsh auto-update prompts to avoid console I/O
      DISABLE_AUTO_UPDATE="true"
      DISABLE_UPDATE_PROMPT="true"
      
      source $ZSH/oh-my-zsh.sh

      # Environment variables (safe for instant prompt)
      export EDITOR='nvim'
      export PNPM_HOME="$HOME/Library/pnpm"
      
      # PATH modifications (safe for instant prompt)
      case ":$PATH:" in
        *":$PNPM_HOME:"*) ;;
        *) export PATH="$PNPM_HOME:$PATH" ;;
      esac

      # Custom aliases (safe for instant prompt)
      alias python=python3
      alias pn=pnpm
      alias pnx='pnpm dlx '
      
      # Functions (safe for instant prompt)
      vim() {
        nvim "$@"
      }

      # fnm (Fast Node Manager) initialization - silent to avoid console I/O
      if command -v fnm > /dev/null 2>&1; then
        eval "$(fnm env --use-on-cd --shell zsh)"
        
        # Auto-use default Node.js version if no project-specific version
        # Use silent flags to prevent console output
        if [[ ! -f .node-version && ! -f .nvmrc ]]; then
          fnm use default --silent-if-unchanged >/dev/null 2>&1 || true
        fi
      fi

      # nnn file manager function - modified to avoid console I/O during startup
      n ()
      {
          [ "${NNNLVL:-0}" -eq 0 ] || {
              echo "nnn is already running" >&2
              return 1
          }
          export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
          command nnn "$@"
          [ ! -f "$NNN_TMPFILE" ] || {
              . "$NNN_TMPFILE"
              rm -f -- "$NNN_TMPFILE" > /dev/null 2>&1
          }
      }
  tags: [shell, environment]

- name: Create p10k configuration backup
  copy:
    src: "{{ user_home }}/.p10k.zsh"
    dest: "{{ user_home }}/.p10k.zsh.backup"
    remote_src: yes
  ignore_errors: yes

- name: Ensure .zprofile exists with Homebrew path
  blockinfile:
    path: "{{ user_home }}/.zprofile"
    marker: "# {mark} ANSIBLE MANAGED HOMEBREW PATH"
    block: |
      eval "$(/opt/homebrew/bin/brew shellenv)"
    create: yes

- name: Remove Homebrew-managed Node.js (if present)
  homebrew:
    name: node
    state: absent
  ignore_errors: yes
  tags: [shell, environment]

- name: Check for Node.js conflicts before fnm setup
  shell: >
    echo "=== Node.js Installation Analysis ===" &&
    if command -v node >/dev/null 2>&1; then
      echo "Found existing Node.js at: $(which node)" &&
      echo "Version: $(node --version)";
    else
      echo "No existing Node.js installation found";
    fi &&
    if command -v fnm >/dev/null 2>&1; then
      echo "fnm is available for Node.js management";
    else
      echo "fnm not found";
    fi
  args:
    executable: /bin/zsh
  ignore_errors: yes
  tags: [shell, environment]

- name: Install and configure Node.js using fnm
  shell: |
    eval "$(fnm env --use-on-cd --shell zsh)"
    fnm install --lts
    fnm use lts-latest
    fnm default lts-latest
  args:
    executable: /bin/zsh
  tags: [shell, environment]

- name: Verify fnm-only Node.js setup
  shell: >
    eval "$(fnm env --use-on-cd --shell zsh)" &&
    if command -v node >/dev/null 2>&1; then
      NODE_PATH=$(which node) &&
      NODE_VERSION=$(node --version) &&
      echo "‚úÖ Node.js verified: $NODE_VERSION at $NODE_PATH" &&
      if [[ "$NODE_PATH" == *fnm* ]]; then
        echo "‚úÖ SUCCESS: Node.js is managed by fnm" &&
        echo "üéâ fnm-only Node.js setup verified!";
      else
        echo "‚ùå ERROR: Node.js is NOT fnm-managed (path: $NODE_PATH)" &&
        exit 1;
      fi;
    else
      echo "‚ùå ERROR: Node.js not available after fnm setup" &&
      exit 1;
    fi
  args:
    executable: /bin/zsh
  ignore_errors: yes
  tags: [shell, environment]

- name: Create Neovim configuration directory
  file:
    path: "{{ user_home }}/.config/nvim"
    state: directory
    mode: '0755'
  tags: [shell, environment, neovim]

- name: Create basic Neovim configuration
  copy:
    dest: "{{ user_home }}/.config/nvim/init.lua"
    content: |
      -- Neovim Configuration
      -- Basic settings
      vim.opt.number = true
      vim.opt.relativenumber = true
      vim.opt.tabstop = 2
      vim.opt.shiftwidth = 2
      vim.opt.expandtab = true
      vim.opt.autoindent = true
      vim.opt.smartindent = true
      vim.opt.wrap = false
      vim.opt.ignorecase = true
      vim.opt.smartcase = true
      vim.opt.hlsearch = true
      vim.opt.incsearch = true
      vim.opt.termguicolors = true
      vim.opt.signcolumn = 'yes'
      vim.opt.updatetime = 250
      vim.opt.timeoutlen = 300
      vim.opt.splitright = true
      vim.opt.splitbelow = true
      vim.opt.scrolloff = 8
      vim.opt.sidescrolloff = 8
      
      -- Set leader key
      vim.g.mapleader = ' '
      vim.g.maplocalleader = ' '
      
      -- Basic keymaps
      vim.keymap.set('n', '<leader>w', ':w<CR>', { desc = 'Save file' })
      vim.keymap.set('n', '<leader>q', ':q<CR>', { desc = 'Quit' })
      vim.keymap.set('n', '<C-h>', '<C-w>h', { desc = 'Move to left window' })
      vim.keymap.set('n', '<C-j>', '<C-w>j', { desc = 'Move to bottom window' })
      vim.keymap.set('n', '<C-k>', '<C-w>k', { desc = 'Move to top window' })
      vim.keymap.set('n', '<C-l>', '<C-w>l', { desc = 'Move to right window' })
      vim.keymap.set('n', '<leader>h', ':nohlsearch<CR>', { desc = 'Clear search highlights' })
      vim.keymap.set('v', '<', '<gv', { desc = 'Indent left and reselect' })
      vim.keymap.set('v', '>', '>gv', { desc = 'Indent right and reselect' })
      
      -- Bootstrap lazy.nvim plugin manager
      local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
      if not vim.loop.fs_stat(lazypath) then
        vim.fn.system({
          "git", "clone", "--filter=blob:none",
          "https://github.com/folke/lazy.nvim.git",
          "--branch=stable", lazypath,
        })
      end
      vim.opt.rtp:prepend(lazypath)
      
      -- Plugin setup with lazy.nvim
      require("lazy").setup({
        -- Colorscheme
        {
          "catppuccin/nvim",
          name = "catppuccin",
          priority = 1000,
          config = function()
            vim.cmd.colorscheme "catppuccin-mocha"
          end,
        },
        
        -- File explorer
        {
          "nvim-tree/nvim-tree.lua",
          dependencies = { "nvim-tree/nvim-web-devicons" },
          config = function()
            vim.g.loaded_netrw = 1
            vim.g.loaded_netrwPlugin = 1
            require("nvim-tree").setup({})
            vim.keymap.set('n', '<leader>e', ':NvimTreeToggle<CR>', { desc = 'Toggle file explorer' })
          end,
        },
        
        -- Statusline
        {
          "nvim-lualine/lualine.nvim",
          dependencies = { "nvim-tree/nvim-web-devicons" },
          config = function()
            require("lualine").setup({
              options = { theme = "catppuccin" },
            })
          end,
        },
        
        -- Fuzzy finder
        {
          "nvim-telescope/telescope.nvim",
          dependencies = { "nvim-lua/plenary.nvim" },
          config = function()
            require("telescope").setup({})
            local builtin = require("telescope.builtin")
            vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Find files' })
            vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Live grep' })
            vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Find buffers' })
          end,
        },
        
        -- Syntax highlighting
        {
          "nvim-treesitter/nvim-treesitter",
          build = ":TSUpdate",
          config = function()
            require("nvim-treesitter.configs").setup({
              ensure_installed = { "lua", "javascript", "typescript", "python", "rust", "json", "yaml" },
              highlight = { enable = true },
              indent = { enable = true },
            })
          end,
        },
        
        -- Auto pairs and comments
        { "windwp/nvim-autopairs", config = true },
        { "numToStr/Comment.nvim", config = true },
        { "lewis6991/gitsigns.nvim", config = true },
      })
    mode: '0644'
  tags: [shell, environment, neovim]